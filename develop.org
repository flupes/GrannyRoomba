* Eclipse setup
** Download and install Eclipse Standard (4.3)
   http://www.eclipse.org/downloads/
** Download and install the Android SDK
   http://developer.android.com/sdk/installing/index.html
** Install the Android Eclipse plugin
   http://developer.android.com/sdk/installing/installing-adt.html
** Install the Apache Logging plugin
   - Add the Orbit Repository
   http://download.eclipse.org/tools/orbit/downloads/
   - Install "Apache Jakarta log4j Plug-in"
#+BEGIN_COMMENT 
*this method is not satisfactory and is now replaced by getting slf4j from git*
Install logback and slf4j from from the qos.ch repository
http://logback.qos.ch/p2/
Note: I could not get the version of logback from Orbit to work, so the
process below is replaced by the above qos...
  Add the Orbit repository
  http://download.eclipse.org/tools/orbit/downloads/
  Install from Orbit:
    - SLF4J API
    - Logback Core
    - Logback Classic
#+END_COMMENT
* Install GrannyRoomba dependencies
#+BEGIN_SRC bash
# IOIO
cd /Users/Shared/git
git clone https://github.com/ytai/ioio.git
cd ioio
git checkout tags/App-IOIO0330
# JeroMq
cd ..
git clone https://github.com/zeromq/jeromq.git
# SLF4j
cd ..
git clone http://github.com/twwwt/slf4j.git
cd slf4j
git checkout 77a28b4 -b v_1.7.5
export JAVA_HOME=`/usr/libexec/java_home`
cd slf4j-api
mvn install
cd ../slf4j-log4j12
mvn install
cd ../slf4j-android
SDK=/Users/Shared/pkgs/android-sdk-macosx_r22.2
export PATH=${SDK}/tools:${SDK}/platform-tools:${PATH}
export ANDROID_HOME=${SDK}
#+END_SRC
* GrannyRoomba Workspace creation (new)
** Define path to dependencies
   Eclipse -> Preferences
   General -> Workspace -> Linked Resources
   New Path Variable
   GR_PKGS_ROOT : /Users/Shared/git
** Import the project dependencies

* GrannyRoomba Workspace creation (old)
** Download the v3.3 (for OTG) of the  IOIO Software from:
   https://github.com/ytai/ioio/wiki/Downloads
   - Unpack under /Users/Shared/pkgs/App-IOIO330
   - File -> Import -> General -> Existing Projects into Workspace
   - Select All but IOIOlibBT and IOIOLibAccessory
** Clone in Eclipse the GrannyRoomba repo (with EGit)
   https://github.com/flupes/GrannyRoomba.git
   - clone the repo under /Volumes/ljfdev/git/GrannyRoomba
   - import the projects under thirdparty:
     - jeromqLibAndroid
     - slf4jLibAndroid
   - import all the projects under code
** JeroMQ for PC
   - From git: https://github.com/zeromq/jeromq.git
   - Import from Maven to Eclipse
* Android Platform
** ADT
http://developer.android.com/sdk/installing/bundle.html
** NDK
http://developer.android.com/tools/sdk/ndk/index.html
** APIs Levels
http://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels
** Direct Links
*** API Guide
    http://developer.android.com/guide/components/index.html
** Connect to Android Device over TCP
http://stackoverflow.com/questions/2604727/how-can-i-connect-to-android-with-adb-over-tcp
#+BEGIN_SRC
# connect device with USB
adb tcpip 5555
# disconnect usb
adb connect 172.16.0.39:5555
# to go back to usb mode
adb usb
#+END_SRC
http://developer.android.com/tools/help/adb.html#forwardports
*** Processes and threads
http://developer.android.com/guide/components/processes-and-threads.html
* IOIO
** Using target projects for both PC and Android
IOIO provides 2 projects libraries:
  - IOIOLibPC, to build project targeted to PC (Mac)
  - IOIOLibAndroid, to build projects targeted to Android
Theses two projects share common code that is part of the IOIOLib
directory. However the dependency is kind of reversed: for example the
IOIOLib (supposedly generic code), relies on ioio.lib.spi.Log which is
defined in the target projects!

This is working fine for single projects built for a specific target (PC
or Android). But it breaks down if you want to build a project (let say
"common") that relies on the IOIO API, and that you want to use this
project in other projects targeted to either PC or Android: it is not
possible to have "common" just depend on the IOIO API without pulling the
target platform specific code!
#+BEGIN_SRC ditaa
Desired:
--------
         Prog_PC     App_Android              
            |             |
    +-------+---+     +---+------+
    |       |   |     |   |      |
IOIO_LibPC  |  CommonLib  |  IOIO_LibAndroid
            |             |
            +----+--------+
                 |
              IOIO_API <=== This is not feasible due to the current
                            architecture of the IOIO projects

Workaround:
-----------
     Prog_PC            App_Android              
        |                    |
        |                    |
    CommonLib <- - - - - CommonLib_Android (separate project sharing
        |       linked       |              the same source tree but
        |      ressource     |              with different settings)
    IOIO_LibPC           IOIO_LibAndroid
#+END_SRC
** Running IOIO connected to an Android Virtual Device
   https://github.com/ytai/ioio/wiki/IOIO-Bridge
** Setup to run on the AVD
#+BEGIN_SRC bash
adb forward tcp:6666 tcp:3333
adb forward tcp:7777 tcp:4444
/Users/Shared/pkgs/IOIOBridge/ioiobridge /dev/tty.usbmodem1411
#+END_SRC
* JeroMq for PC under Eclipse
  - Checkout the repo (command line) from:
  https://github.com/zeromq/jeromq.git
  - Import the projects from the repo with Eclipse
  - Convert to plugin (right click menu)
* JeroMq for Android under Eclipse
*Only if not using the pre-packaged project under thirdparty*
** Get the source code for PC
   git clone https://github.com/zeromq/jeromq.git
   - File -> Import -> Maven -> Existing Maven projects
   - Rename the project as jeromqLibPC
** Create a new Android Library
   - File -> New -> Others -> Android -> Android Application Project
   - name: jeromqLibAndroid, minimum SDK: 8, target SDK 17
   - Configure Project tab: Uncheck all but "Mark this project as library"
   - Copy the 4 packages under src/main/java in jeromqLibPC to the src
     folder under jeromqLibAndroid (org.jeromq, org.zeromq.codec,
     org.zeromq, zmq)
   - In the Manifest, change the package name to org.zeromq
* Basic tests that work
** Testing jeromq server on Android and client on PC
#+BEGIN_EXAMPLE
# launch the server on the virtual device:
/JeroMqAndroid/AndroidManifest.xml

# connect to the Virtual Android Device which runs a server on port 8888:
adb forward tcp:6666 tcp:8888

# run the following exec on the PC
/JZeroMqPC/src/org/flupes/grannyroomba/test/zmqpc/helloclient/hwclient.java
#+END_EXAMPLE
* Creating the Eclipse projects required for GR
** slf4j
*** Clone the git repo
    https://github.com/qos-ch/slf4j.git
*** Import the Maven projects into Eclipe:
    - need a list of required projects here
*** Modify the slf4j-api.pom.xml to remoe the error
diff --git a/slf4j-api/pom.xml b/slf4j-api/pom.xml
index 63a489c..49250ef 100644
--- a/slf4j-api/pom.xml
+++ b/slf4j-api/pom.xml
@@ -67,12 +67,15 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-antrun-plugin</artifactId>
         <executions>
+            <ignore />
+            <!--
           <execution>
             <phase>process-classes</phase>
             <goals>
              <goal>run</goal>
             </goals>
           </execution>
+           -->
         </executions>
         <configuration>
           <tasks>
** jeromq
*** Clone the git repo
    https://github.com/zeromq/jeromq.git
*** IMport the Maven project into Eclipse
*** Remove the src/test directory
*** Modify the pom.xm to get rid of the junit dependency
diff --git a/pom.xml b/pom.xml
index 1729d45..d68ae95 100644
--- a/pom.xml
+++ b/pom.xml
@@ -42,12 +42,6 @@
         </exclusion>
       </exclusions>
     </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.8.2</version>
-      <scope>test</scope>
-    </dependency>
   </dependencies>
   <build>
     <plugins>
** ioio
*** Clone the git repo
    https://github.com/ytai/ioio.git
*** Import "Projects from Git" into Eclipse
    - a list here is needed
*** Resolve the libraries path for IOIOBridge
* ZeroMQ for Android
*deprecated now that we use JeroMQ*
http://www.zeromq.org/build:android
#+BEGIN_SRC bash
# Create the standalone toolchain
$NDK/build/tools/make-standalone-toolchain.sh \
    --system=darwin-x86_64 \
    --platform=android-14 \
    --install-dir=/Users/Shared/pkgs/android-toolchain_14

# Configure and build ZeroMQ
export OUTPUT_DIR=/Users/Shared/android
cd /Users/Shared/android/src
tar xzvf ../../tarballs/zeromq-3.2.2.tar.gz
cd zeromq-3.2.2
./configure --enable-static --disable-version --host=arm-linux-androideabi \
    --prefix=$OUTPUT_DIR LDFLAGS="-L$OUTPUT_DIR/lib" CPPFLAGS="-fPIC \
    -I$OUTPUT_DIR/include" LIBS="-lgcc"
# What to do with --disable-shared ???
make
make install

# Configure and build jzmq
cd /Users/Shared/android/src
git clone https://github.com/zeromq/jzmq.git
cd jzmq
export OUTPUT_DIR=/Users/Shared/android
export JAVAC="javac -source 5 -target 5"
./autogen.sh
# Edit the configure script (does not locate correctly the java headers)
15929,15930c15929,15930
< case "$host_os" in
<         darwin*)        _JTOPDIR=`echo "$_JTOPDIR" | sed -e 's:/[^/]*$::'`
---
> case `uname -s` in
>         Darwin*)        _JTOPDIR=`echo "$_JTOPDIR" | sed -e 's:/[^/]*$::'`
./configure --enable-static --disable-version --host=arm-linux-androideabi \
    --prefix=$OUTPUT_DIR --with-zeromq=$OUTPUT_DIR
make
make install

# Reduce size (remove debug info only)
cd $OUTPUT_DIR/lib
arm-linux-androideabi-strip -g libzmq.a libjzmq.a
#+END_SRC
* Random Stuff
** How to add the license headers:
copyright-header -n --license GPL3 --copyright-holder "Lorenzo Flueckiger"
--copyright-year=2013 --copyright-software="GrannyRoomba"
--copyright-software-description "Telepresence robot based on a Roomba
and Android tablet" --add-path org.flupes.ljf.grannyroomba/src
