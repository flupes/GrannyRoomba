// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Motor.proto

package org.flupes.ljf.grannyroomba.messages;

public final class MotorProto {
  private MotorProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MotorCmdOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .grannyroomba.messages.MotorCmd.Mode mode = 1;
    /**
     * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
     *
     * <pre>
     ** Type of motor command 
     * </pre>
     */
    boolean hasMode();
    /**
     * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
     *
     * <pre>
     ** Type of motor command 
     * </pre>
     */
    org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode getMode();

    // optional float position = 2;
    /**
     * <code>optional float position = 2;</code>
     *
     * <pre>
     ** Position to achieved
     * (absolute or relative depending the mode)
     * Will be ignored in "velocity" mode
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional float position = 2;</code>
     *
     * <pre>
     ** Position to achieved
     * (absolute or relative depending the mode)
     * Will be ignored in "velocity" mode
     * </pre>
     */
    float getPosition();

    // optional float velocity = 3;
    /**
     * <code>optional float velocity = 3;</code>
     *
     * <pre>
     ** Target velocity
     * (can be ignored for position mode if the motor implementation
     * does not support it)
     * </pre>
     */
    boolean hasVelocity();
    /**
     * <code>optional float velocity = 3;</code>
     *
     * <pre>
     ** Target velocity
     * (can be ignored for position mode if the motor implementation
     * does not support it)
     * </pre>
     */
    float getVelocity();

    // optional float acceleration = 4;
    /**
     * <code>optional float acceleration = 4;</code>
     *
     * <pre>
     ** Target acceleration
     * (can be ignored if the motor implementation does not support it)
     * </pre>
     */
    boolean hasAcceleration();
    /**
     * <code>optional float acceleration = 4;</code>
     *
     * <pre>
     ** Target acceleration
     * (can be ignored if the motor implementation does not support it)
     * </pre>
     */
    float getAcceleration();

    // optional float foce = 5;
    /**
     * <code>optional float foce = 5;</code>
     *
     * <pre>
     ** Target force
     * (only here for future use)
     * </pre>
     */
    boolean hasFoce();
    /**
     * <code>optional float foce = 5;</code>
     *
     * <pre>
     ** Target force
     * (only here for future use)
     * </pre>
     */
    float getFoce();
  }
  /**
   * Protobuf type {@code grannyroomba.messages.MotorCmd}
   */
  public static final class MotorCmd extends
      com.google.protobuf.GeneratedMessage
      implements MotorCmdOrBuilder {
    // Use MotorCmd.newBuilder() to construct.
    private MotorCmd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MotorCmd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MotorCmd defaultInstance;
    public static MotorCmd getDefaultInstance() {
      return defaultInstance;
    }

    public MotorCmd getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MotorCmd(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode value = org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                mode_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              position_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              velocity_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              acceleration_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              foce_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.flupes.ljf.grannyroomba.messages.MotorProto.internal_static_grannyroomba_messages_MotorCmd_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.flupes.ljf.grannyroomba.messages.MotorProto.internal_static_grannyroomba_messages_MotorCmd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.class, org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Builder.class);
    }

    public static com.google.protobuf.Parser<MotorCmd> PARSER =
        new com.google.protobuf.AbstractParser<MotorCmd>() {
      public MotorCmd parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MotorCmd(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MotorCmd> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code grannyroomba.messages.MotorCmd.Mode}
     *
     * <pre>
     ** Available control modes 
     * </pre>
     */
    public enum Mode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CTRL_OFF = 1;</code>
       *
       * <pre>
       ** Turn the motor off (remove power) 
       * </pre>
       */
      CTRL_OFF(0, 1),
      /**
       * <code>CTRL_STOP = 2;</code>
       *
       * <pre>
       ** Stop the motor (servo as soon as possible to zero velocity) 
       * </pre>
       */
      CTRL_STOP(1, 2),
      /**
       * <code>CTRL_ABS_POS = 3;</code>
       *
       * <pre>
       ** Servo the motor to the absolute given position 
       * </pre>
       */
      CTRL_ABS_POS(2, 3),
      /**
       * <code>CTRL_REL_POS = 4;</code>
       *
       * <pre>
       ** Servo the motor to the relative (from current) position 
       * </pre>
       */
      CTRL_REL_POS(3, 4),
      /**
       * <code>CTRL_VELOCITY = 5;</code>
       *
       * <pre>
       ** Servo the motor at a constant velocity 
       * </pre>
       */
      CTRL_VELOCITY(4, 5),
      /**
       * <code>CTRL_FORCE = 6;</code>
       *
       * <pre>
       ** Servo the motor at a constant torque/linear force 
       * </pre>
       */
      CTRL_FORCE(5, 6),
      ;

      /**
       * <code>CTRL_OFF = 1;</code>
       *
       * <pre>
       ** Turn the motor off (remove power) 
       * </pre>
       */
      public static final int CTRL_OFF_VALUE = 1;
      /**
       * <code>CTRL_STOP = 2;</code>
       *
       * <pre>
       ** Stop the motor (servo as soon as possible to zero velocity) 
       * </pre>
       */
      public static final int CTRL_STOP_VALUE = 2;
      /**
       * <code>CTRL_ABS_POS = 3;</code>
       *
       * <pre>
       ** Servo the motor to the absolute given position 
       * </pre>
       */
      public static final int CTRL_ABS_POS_VALUE = 3;
      /**
       * <code>CTRL_REL_POS = 4;</code>
       *
       * <pre>
       ** Servo the motor to the relative (from current) position 
       * </pre>
       */
      public static final int CTRL_REL_POS_VALUE = 4;
      /**
       * <code>CTRL_VELOCITY = 5;</code>
       *
       * <pre>
       ** Servo the motor at a constant velocity 
       * </pre>
       */
      public static final int CTRL_VELOCITY_VALUE = 5;
      /**
       * <code>CTRL_FORCE = 6;</code>
       *
       * <pre>
       ** Servo the motor at a constant torque/linear force 
       * </pre>
       */
      public static final int CTRL_FORCE_VALUE = 6;


      public final int getNumber() { return value; }

      public static Mode valueOf(int value) {
        switch (value) {
          case 1: return CTRL_OFF;
          case 2: return CTRL_STOP;
          case 3: return CTRL_ABS_POS;
          case 4: return CTRL_REL_POS;
          case 5: return CTRL_VELOCITY;
          case 6: return CTRL_FORCE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Mode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Mode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Mode>() {
              public Mode findValueByNumber(int number) {
                return Mode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.getDescriptor().getEnumTypes().get(0);
      }

      private static final Mode[] VALUES = values();

      public static Mode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Mode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:grannyroomba.messages.MotorCmd.Mode)
    }

    private int bitField0_;
    // required .grannyroomba.messages.MotorCmd.Mode mode = 1;
    public static final int MODE_FIELD_NUMBER = 1;
    private org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode mode_;
    /**
     * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
     *
     * <pre>
     ** Type of motor command 
     * </pre>
     */
    public boolean hasMode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
     *
     * <pre>
     ** Type of motor command 
     * </pre>
     */
    public org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode getMode() {
      return mode_;
    }

    // optional float position = 2;
    public static final int POSITION_FIELD_NUMBER = 2;
    private float position_;
    /**
     * <code>optional float position = 2;</code>
     *
     * <pre>
     ** Position to achieved
     * (absolute or relative depending the mode)
     * Will be ignored in "velocity" mode
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float position = 2;</code>
     *
     * <pre>
     ** Position to achieved
     * (absolute or relative depending the mode)
     * Will be ignored in "velocity" mode
     * </pre>
     */
    public float getPosition() {
      return position_;
    }

    // optional float velocity = 3;
    public static final int VELOCITY_FIELD_NUMBER = 3;
    private float velocity_;
    /**
     * <code>optional float velocity = 3;</code>
     *
     * <pre>
     ** Target velocity
     * (can be ignored for position mode if the motor implementation
     * does not support it)
     * </pre>
     */
    public boolean hasVelocity() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float velocity = 3;</code>
     *
     * <pre>
     ** Target velocity
     * (can be ignored for position mode if the motor implementation
     * does not support it)
     * </pre>
     */
    public float getVelocity() {
      return velocity_;
    }

    // optional float acceleration = 4;
    public static final int ACCELERATION_FIELD_NUMBER = 4;
    private float acceleration_;
    /**
     * <code>optional float acceleration = 4;</code>
     *
     * <pre>
     ** Target acceleration
     * (can be ignored if the motor implementation does not support it)
     * </pre>
     */
    public boolean hasAcceleration() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float acceleration = 4;</code>
     *
     * <pre>
     ** Target acceleration
     * (can be ignored if the motor implementation does not support it)
     * </pre>
     */
    public float getAcceleration() {
      return acceleration_;
    }

    // optional float foce = 5;
    public static final int FOCE_FIELD_NUMBER = 5;
    private float foce_;
    /**
     * <code>optional float foce = 5;</code>
     *
     * <pre>
     ** Target force
     * (only here for future use)
     * </pre>
     */
    public boolean hasFoce() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float foce = 5;</code>
     *
     * <pre>
     ** Target force
     * (only here for future use)
     * </pre>
     */
    public float getFoce() {
      return foce_;
    }

    private void initFields() {
      mode_ = org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode.CTRL_OFF;
      position_ = 0F;
      velocity_ = 0F;
      acceleration_ = 0F;
      foce_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, mode_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, velocity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, acceleration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, foce_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, position_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, velocity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, acceleration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, foce_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code grannyroomba.messages.MotorCmd}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmdOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.flupes.ljf.grannyroomba.messages.MotorProto.internal_static_grannyroomba_messages_MotorCmd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.flupes.ljf.grannyroomba.messages.MotorProto.internal_static_grannyroomba_messages_MotorCmd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.class, org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Builder.class);
      }

      // Construct using org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mode_ = org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode.CTRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        velocity_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        acceleration_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        foce_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.flupes.ljf.grannyroomba.messages.MotorProto.internal_static_grannyroomba_messages_MotorCmd_descriptor;
      }

      public org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd getDefaultInstanceForType() {
        return org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.getDefaultInstance();
      }

      public org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd build() {
        org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd buildPartial() {
        org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd result = new org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mode_ = mode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.position_ = position_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.velocity_ = velocity_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.acceleration_ = acceleration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.foce_ = foce_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd) {
          return mergeFrom((org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd other) {
        if (other == org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.getDefaultInstance()) return this;
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        if (other.hasVelocity()) {
          setVelocity(other.getVelocity());
        }
        if (other.hasAcceleration()) {
          setAcceleration(other.getAcceleration());
        }
        if (other.hasFoce()) {
          setFoce(other.getFoce());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMode()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .grannyroomba.messages.MotorCmd.Mode mode = 1;
      private org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode mode_ = org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode.CTRL_OFF;
      /**
       * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
       *
       * <pre>
       ** Type of motor command 
       * </pre>
       */
      public boolean hasMode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
       *
       * <pre>
       ** Type of motor command 
       * </pre>
       */
      public org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode getMode() {
        return mode_;
      }
      /**
       * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
       *
       * <pre>
       ** Type of motor command 
       * </pre>
       */
      public Builder setMode(org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .grannyroomba.messages.MotorCmd.Mode mode = 1;</code>
       *
       * <pre>
       ** Type of motor command 
       * </pre>
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = org.flupes.ljf.grannyroomba.messages.MotorProto.MotorCmd.Mode.CTRL_OFF;
        onChanged();
        return this;
      }

      // optional float position = 2;
      private float position_ ;
      /**
       * <code>optional float position = 2;</code>
       *
       * <pre>
       ** Position to achieved
       * (absolute or relative depending the mode)
       * Will be ignored in "velocity" mode
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float position = 2;</code>
       *
       * <pre>
       ** Position to achieved
       * (absolute or relative depending the mode)
       * Will be ignored in "velocity" mode
       * </pre>
       */
      public float getPosition() {
        return position_;
      }
      /**
       * <code>optional float position = 2;</code>
       *
       * <pre>
       ** Position to achieved
       * (absolute or relative depending the mode)
       * Will be ignored in "velocity" mode
       * </pre>
       */
      public Builder setPosition(float value) {
        bitField0_ |= 0x00000002;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float position = 2;</code>
       *
       * <pre>
       ** Position to achieved
       * (absolute or relative depending the mode)
       * Will be ignored in "velocity" mode
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000002);
        position_ = 0F;
        onChanged();
        return this;
      }

      // optional float velocity = 3;
      private float velocity_ ;
      /**
       * <code>optional float velocity = 3;</code>
       *
       * <pre>
       ** Target velocity
       * (can be ignored for position mode if the motor implementation
       * does not support it)
       * </pre>
       */
      public boolean hasVelocity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float velocity = 3;</code>
       *
       * <pre>
       ** Target velocity
       * (can be ignored for position mode if the motor implementation
       * does not support it)
       * </pre>
       */
      public float getVelocity() {
        return velocity_;
      }
      /**
       * <code>optional float velocity = 3;</code>
       *
       * <pre>
       ** Target velocity
       * (can be ignored for position mode if the motor implementation
       * does not support it)
       * </pre>
       */
      public Builder setVelocity(float value) {
        bitField0_ |= 0x00000004;
        velocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float velocity = 3;</code>
       *
       * <pre>
       ** Target velocity
       * (can be ignored for position mode if the motor implementation
       * does not support it)
       * </pre>
       */
      public Builder clearVelocity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        velocity_ = 0F;
        onChanged();
        return this;
      }

      // optional float acceleration = 4;
      private float acceleration_ ;
      /**
       * <code>optional float acceleration = 4;</code>
       *
       * <pre>
       ** Target acceleration
       * (can be ignored if the motor implementation does not support it)
       * </pre>
       */
      public boolean hasAcceleration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float acceleration = 4;</code>
       *
       * <pre>
       ** Target acceleration
       * (can be ignored if the motor implementation does not support it)
       * </pre>
       */
      public float getAcceleration() {
        return acceleration_;
      }
      /**
       * <code>optional float acceleration = 4;</code>
       *
       * <pre>
       ** Target acceleration
       * (can be ignored if the motor implementation does not support it)
       * </pre>
       */
      public Builder setAcceleration(float value) {
        bitField0_ |= 0x00000008;
        acceleration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float acceleration = 4;</code>
       *
       * <pre>
       ** Target acceleration
       * (can be ignored if the motor implementation does not support it)
       * </pre>
       */
      public Builder clearAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        acceleration_ = 0F;
        onChanged();
        return this;
      }

      // optional float foce = 5;
      private float foce_ ;
      /**
       * <code>optional float foce = 5;</code>
       *
       * <pre>
       ** Target force
       * (only here for future use)
       * </pre>
       */
      public boolean hasFoce() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float foce = 5;</code>
       *
       * <pre>
       ** Target force
       * (only here for future use)
       * </pre>
       */
      public float getFoce() {
        return foce_;
      }
      /**
       * <code>optional float foce = 5;</code>
       *
       * <pre>
       ** Target force
       * (only here for future use)
       * </pre>
       */
      public Builder setFoce(float value) {
        bitField0_ |= 0x00000010;
        foce_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float foce = 5;</code>
       *
       * <pre>
       ** Target force
       * (only here for future use)
       * </pre>
       */
      public Builder clearFoce() {
        bitField0_ = (bitField0_ & ~0x00000010);
        foce_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:grannyroomba.messages.MotorCmd)
    }

    static {
      defaultInstance = new MotorCmd(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:grannyroomba.messages.MotorCmd)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_grannyroomba_messages_MotorCmd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_grannyroomba_messages_MotorCmd_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Motor.proto\022\025grannyroomba.messages\"\362\001\n" +
      "\010MotorCmd\0222\n\004mode\030\001 \002(\0162$.grannyroomba.m" +
      "essages.MotorCmd.Mode\022\020\n\010position\030\002 \001(\002\022" +
      "\020\n\010velocity\030\003 \001(\002\022\024\n\014acceleration\030\004 \001(\002\022" +
      "\014\n\004foce\030\005 \001(\002\"j\n\004Mode\022\014\n\010CTRL_OFF\020\001\022\r\n\tC" +
      "TRL_STOP\020\002\022\020\n\014CTRL_ABS_POS\020\003\022\020\n\014CTRL_REL" +
      "_POS\020\004\022\021\n\rCTRL_VELOCITY\020\005\022\016\n\nCTRL_FORCE\020" +
      "\006B2\n$org.flupes.ljf.grannyroomba.message" +
      "sB\nMotorProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_grannyroomba_messages_MotorCmd_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_grannyroomba_messages_MotorCmd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_grannyroomba_messages_MotorCmd_descriptor,
              new java.lang.String[] { "Mode", "Position", "Velocity", "Acceleration", "Foce", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
